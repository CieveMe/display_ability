spring:
  authurl: http://organization:16200/common/query/store_info/get

  datasource:
    dynamic:
      primary: supply-master
      datasource:
        supply-master:
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://mysql.office_bj.dev.yingliduo.cn:3306/yld_supply_chain_test?useUnicode=true&characterEncoding=utf8&useSSL=false
          username: root
          password: 123456
        #        配置从库,负责查询
        supply-slave:
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://mysql.office_bj.dev.yingliduo.cn:3306/yld_supply_chain_test?useUnicode=true&characterEncoding=utf8&useSSL=false
          username: root
          password: 123456
  #  datasource:
  #    dynamic:
  #      primary: supply-read
  #      datasource:
  #        supply-read:
  #          driver-class-name: com.mysql.jdbc.Driver
  #          url: jdbc:mysql://192.168.50.3:22014/yld_supply_chain?useUnicode=true&characterEncoding=utf8&useSSL=false
  #          username: public
  #          password: "R8Z4W7Nf"
  #        supply-update:
  #          driver-class-name: com.mysql.jdbc.Driver
  #          url: jdbc:mysql://192.168.50.3:22014/yld_supply_chain?useUnicode=true&characterEncoding=utf8&useSSL=false
  #          username: public
  #          password: "R8Z4W7Nf"
  #        org:
  #          driver-class-name: com.mysql.jdbc.Driver
  #          url: jdbc:mysql://192.168.50.3:22014/yld_organization_info?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
  #          username: public
  #          password: "R8Z4W7Nf"
  #        product:
  #          driver-class-name: com.mysql.jdbc.Driver
  #          url: jdbc:mysql://192.168.50.3:22014/yld_product_info?useUnicode=true&characterEncoding=utf8&useSSL=false
  #          username: public
  #          password: "R8Z4W7Nf"
  #        userInfo:
  #          driver-class-name: com.mysql.jdbc.Driver
  #          url: jdbc:mysql://192.168.50.3:22014/yld_user_info?useUnicode=true&characterEncoding=utf8&useSSL=false
  #          username: public
  #          password: "R8Z4W7Nf"
  redis:
    database: 12
    host: ${REDIS_SERVER_URL}
    port: 6379
    password: ${REDIS_SERVER_PWD}      # 密码（默认为空）
    timeout:
      seconds: 6 # 连接超时时长（秒）
  rabbitmq:
    username: ${MQ_SERVER_NAME}
    password: ${MQ_SERVER_PWD}
    addresses: ${MQ_SERVER_URL}
    port: 5672

  cloud:
    nacos:
      discovery:
        enabled: true
        register-enabled: true
        server-addr: nacos-test.yingliduo.cn:80

    stream:
      binders:
        yld-rabbit:
          type: rabbit
      bindings:
        yldOrderSaveInPut:
          destination: yld_order_save_test
          binder: yld-rabbit
          group: yld_group
        yldOrderSaveOutPut:
          destination: yld_order_save_test
          binder: yld-rabbit
        yldOrderUpdateInPut:
          destination: yld_order_update_test
          binder: yld-rabbit
          group: yld_group
        yldOrderUpdateOutPut:
          destination: yld_order_update_test
          binder: yld-rabbit
        yldAddPointOutPut:
          destination: yld_add_point_test
          binder: yld-rabbit
        yldOrderCancelInPut:
          destination: yld_order_cancel_test
          binder: yld-rabbit
          group: yld_group
        yldOrderCancelOutPut:
          destination: yld_order_cancel_test
          binder: yld-rabbit
        yldOrderCancelNewInPut:
          destination: yld_order_cancel_new_test
          binder: yld-rabbit
          group: yld_group
        yldOrderCancelNewOutPut:
          destination: yld_order_cancel_new_test
          binder: yld-rabbit
#eureka:
#  client:
#    service-url:
#      defaultZone: ${ADDITIONAL_EUREKA_SERVER_LIST}
#    healthcheck:
#      enabled: true
#  instance:
#    prefer-ip-address: true
#    instance-id: (${spring.cloud.client.ip-address}):::${spring.application.name}:${server.port}----@project.version@

server:
  port: 16501

logging:
  config: classpath:log4j2/log4j2-test.xml
  file: /logs-supply/supply-chain.log
  level:
    org.springframework: info
    cn.com.yyxx.yld: debug
    cn.com.yyxx.yld.scm.service.tm.impl.NaturalDayStatisticsTypeServiceImpl: info
    cn.com.yyxx.yld.scm.service.tm.impl.OriginalDataSourceServiceImpl: info
    cn.com.yyxx.yld.scm.service.tm.impl.AccountDayStatisticsTypeServiceImpl: info
    cn.com.yyxx.yld.scm.service.tm.impl.DayLyDataSourceServiceImpl: info
security:
  oauth:
    server:
      host: ${ADDITIONAL_AUTH_HOST_NAME}
  oauth2:
    client:
      access-token-uri: ${security.oauth.server.host}/oauth/token
      user-authorization-uri: ${security.oauth.server.host}/oauth/authorize
      client-authentication-scheme: form

yld:
#  basic:
#    name: yld-basic-info-service
#    url:
  payment:
    center:
      name: retail-payment-center-dispatch
      url:
      refund: http://supplyv2:16501/common/supply/v2/cancel/back
  supervip:
    center:
      name: retail-app-member-handler
      url:
    discount:
      name: retail-app-finance-handler
      url:

#    center:
#      name: retail-app-member-handler-dev
#      url: http://192.168.30.221:30089
#    discount:
#      name: retail-app-finance-handler-dev-zlj
#      url: http://192.168.30.221:30002

  productv2:
    info:
      name: yld-product-v2
      url:
  product:
    info:
      name: yld-product-info-service
      url:
  user:
    info:
      name: yld-user-info-service
      url:
  organization:
    name: yld-organization-info-service
    url:

  yq:
    url: http://api-test.yingliduo.cn/member/order_detail.html?orderNo=
#    url: http://yq_test.yingliduo.cn/index.html?orderNo=

  smw:
#    cancel_bill_url: http://192.168.50.13:8080/api/cancel_bill/ORDERNO.rhtml
    cancel_bill_url: http://member-handler:8700/member/api/cancel_bill/ORDERNO
    url: http://api-test.yingliduo.cn/member/order_detail.html?orderNo=  #未配置，需要配置
  scm:
    pay:
      factory:
        pay-url: http://retail-payment-center-dispatch:8800/asyncgateface
        encrypt: true
        query-url: http://retail-payment-center-dispatch:8800/gateface
#        return-notify-url: http://192.168.50.3:10020/supply-v2/common/supply/v2/pay/back
#        return-notify-openId: http://192.168.50.3:10020/supply-v2/common/supply/v2/open_id/back
        return-notify-openId: http://supplyv2:16501/common/supply/v2/open_id/back
        return-notify-url: http://supplyv2:16501/common/supply/v2/pay/back
    wx:
      template:
        config:
          #          generateReport: pLQ557CuhoVALklk_8O_GMGnvUiTCYjrd5KSpaYz1lM
          #          statisticalResult: m2iPQo89490pFvawbFVH9FUxTF7Qu9K6vQSByqv7lhw
          payResult: aEcN9-C1yxU0FC9s3xHPFfVPBCYpv_e0KwP718EwrCI
          refundResult: Jai2-5dWbwiC_CKMSiEWJgZiia26jTr3k89KwwokK0A

#    lkl:
#      ftp:
#        ip: 140.143.0.143
#        port: 22
#        username: public
#        password: sftp_123456
#        file-path: /upload/
#  security:
#    limit:
#      enabled: false
#      ignoreUrls:
#        - /store/hello
#      lastViewAllowIgnoreUrls:
#        - /store/hard_ware/sync
#        - /store/active/code/sync
#        - /store/user/sync
#        - /store/product/category/all
#        - /store/merchant/product/sync
#        - /store/merchant/product/sale/upload
#        - /store/index/yesterday_index
#        - /store/sync/video
#      middleKey: supply
#      sameUrlIgnoreConfigCode: OARC_SUPPLY_RESTRICTION_CONFIGURATION
#      lastViewIgnoreConfigCode: OARC_SUPPLY_NON_RESTRICTION_CONFIGURATION
#  three:
#    hive:
#      appKey: 9mVjdxRbRM
#      appSecret: CjgGutLnaJMmvbXdLunaRDADaLV46Sws
#      urlMap:
#        base_url: https://fcems-sit3.fcbox.com
#    nms:
#      pos:
#        appId: 8a81c1be6d4ad929016db4e26192002a
#        appKey: 7d171cb730b84cef8d6e7944fedc4f2a
#        timeout: 60000
#        baseUrl: https://api-mop.chinaums.com/v2/poslink/transaction/
#  active_pom: test


socket:
  http: netty-server:8090
  socketip:
  port: 22221
  url: /receive_msg

tobacoo:
  http: 192.168.50.162:8080
  socketip:
  port: 22221
  url: /managex/send_socket.rhtml
  enable: false
